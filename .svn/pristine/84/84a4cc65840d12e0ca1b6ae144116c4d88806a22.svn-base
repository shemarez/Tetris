/*
 * TCSS305 Tetris part a
 * winter 2016
 */
package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.border.Border;

import model.Board;
/**
 * Puts all panels together, creates and shows
 * GUI.
 * @author Shema Rezanejad
 * @version 1
 *
 */
public class MainGUI extends JFrame {
    /**
     * Generated serial version ID.
     */
    private static final long serialVersionUID = -5056050661369885282L;
    /** Stores a BoardGUI. */
    private BoardGUI myBoardGUI;
    /** Stores east panel. */
    private JPanel myEastPanel;
    private Board myMainBoard;
    private Font myCustomFont;

    /**
     * Starts the GUI. Puts all the components
     * together.
     * @throws IOException 
     */
    public void start() throws IOException {
        setTitle("Tetris");
        BufferedImage image = ImageIO.read(new File("images/tetris_tile1.png"));
        this.setContentPane(new ImagePanel(image));
        this.setPreferredSize(new Dimension(450,475));
        
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new FlowLayout());
        this.getContentPane().setBackground(Color.DARK_GRAY);
        myEastPanel = new JPanel(new FlowLayout());
        myEastPanel.setPreferredSize(new Dimension(150, 400));
        final NextPiece nextPanel = new NextPiece();
        final Score scorePanel = new Score();

        myBoardGUI = new BoardGUI(this);
        myMainBoard = myBoardGUI.getBoard();
        myMainBoard.addObserver(nextPanel);
        myMainBoard.addObserver(myBoardGUI);
        myMainBoard.addObserver(scorePanel);

        myBoardGUI.setFocusTraversalKeysEnabled(true);
        myBoardGUI.requestFocus();
        myBoardGUI.addKeyListener(new KeyPress());

        setJMenuBar(createMenuBar());
        add(myBoardGUI, BorderLayout.CENTER);
        myEastPanel.add(scorePanel);
        myEastPanel.add(scorePanel.levelGUI());
        keyLabel();
        myEastPanel.add(nextPanel);
        myEastPanel.setBackground(Color.DARK_GRAY);
        add(myEastPanel, BorderLayout.EAST);

        setResizable(false);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /** Label for the game controls. */
    private void keyLabel() {
        final JPanel centerPanel = new JPanel();
        centerPanel.setPreferredSize(new Dimension(120, 120));
        centerPanel.setBackground(new Color(196,207,161));
        final Border blackline = BorderFactory.createLineBorder(Color.black);
        centerPanel.setBorder(blackline);
        final StringBuilder controls = new StringBuilder(200);

        controls.append("<html><u>Controls</u> "
                        + "<br>Rotate- up <br> Left- left<br> Right- right "
                        + "<br>Drop- down</html");

        final JLabel keyLabel = new JLabel(controls.toString(), JLabel.CENTER);
        //Font font = new Font("Helvetica", Font.PLAIN, 16);
         
         keyLabel.setFont(createCustomFont());
         keyLabel.setForeground(Color.darkGray);
        centerPanel.add(keyLabel);

        myEastPanel.add(centerPanel);


    }
    private Font createCustomFont() {
        try {
            //create the font to use. Specify the size!
            myCustomFont = Font.createFont(Font.TRUETYPE_FONT,
                                         new File("Fonts\\ARCADECLASSIC.ttf")).deriveFont(15f);
            final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            //register the font
            ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, new File("Fonts\\ARCADECLASSIC.ttf")));
        } catch (IOException e) {
            e.printStackTrace();
        }
        catch(FontFormatException e)
        {
            e.printStackTrace();
        }
        return myCustomFont;
        
        
    }
    /** Creates the menu bar. 
     * 
     * @return a menuBar
     */
    private JMenuBar createMenuBar() {
        final JMenuBar menuBar = new JMenuBar();

        final JMenu file = new JMenu("File");
        file.setFont(createCustomFont());
        final JMenu options = new JMenu("Settings");
        options.setFont(createCustomFont());
        final JMenuItem exit = new JMenuItem("Exit");
        exit.setFont(createCustomFont());
        final JMenuItem newGame = new JMenuItem("New Game");
        newGame.setFont(createCustomFont());
        final JMenuItem endGame = new JMenuItem("End Game");
        endGame.setFont(createCustomFont());
        final JFrame frame = this;

        endGame.setEnabled(false);
        newGame.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                myBoardGUI.newGame(newGame, endGame); 
            }

        });
        endGame.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                myBoardGUI.endGame();
                newGame.setEnabled(true);
                endGame.setEnabled(false);


            }

        });
        exit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                frame.dispose();

            }

        });


        menuBar.add(file);
        menuBar.add(options);
        file.add(newGame);
        file.add(endGame);
        file.addSeparator();
        file.add(exit);

        menuBar.setVisible(true);

        return menuBar;


    }

    /**
     * Private class for KeyListeners. If key
     * is pressed certain action occurs.
     * @author Shema Rezanejad
     * @version 1
     *
     */
    private class KeyPress extends KeyAdapter {

        @Override
        public void keyPressed(final KeyEvent theEvent) {
            myBoardGUI.keyPressed(theEvent);

        }


    }



}



