package view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.border.Border;

import model.Board;
import model.TetrisPiece;

public class MainGUI extends JFrame{
    private KeyListener myKeyListener;
    private BoardGUI myBoardGUI;
    private Board myMainBoard;
    private JPanel myEastPanel;
    private JMenu myWindow;
    private int myWidth;
    private int myHeight;
    private char myKey;
    
    
    public MainGUI() {
        super();
        myWidth = 10;
        myHeight = 20;

    }

    /**
     * 
     */
    private static final long serialVersionUID = -5056050661369885282L;
    private JMenuBar myMenuBar;
    public void start() {
        setTitle("Tetris");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        myEastPanel = new JPanel(new BorderLayout());
        final NextPiece nextPanel = new NextPiece();
        
        myBoardGUI = new BoardGUI(this);
        myMainBoard = myBoardGUI.getBoard();
        myMainBoard.addObserver(nextPanel);
        myMainBoard.addObserver(myBoardGUI);
        
        myBoardGUI.setFocusTraversalKeysEnabled(true);
        myBoardGUI.requestFocus();
        myBoardGUI.addKeyListener(new keyPress());
        
        setJMenuBar(createMenuBar());
        add(myBoardGUI, BorderLayout.CENTER);
        myEastPanel.add(nextPanel, BorderLayout.NORTH);
        myEastPanel.add(myBoardGUI.createScorePanel(), BorderLayout.SOUTH);
        add(myEastPanel, BorderLayout.EAST);
       
        keyLabel();
        setResizable(false);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    private void keyLabel() {
        final JPanel centerPanel = new JPanel();
       
        final Border blackline = BorderFactory.createLineBorder(Color.black);
        centerPanel.setBorder(blackline);
        final StringBuilder controls = new StringBuilder(200);
        controls.append("<html><u>Controls</u> "
                        + "<br>Rotate: up <br> Left: left<br> Right: right "
                         + "<br>Drop: down<br> Pause: space</html");
        final JLabel keyLabel = new JLabel(controls.toString(), JLabel.CENTER);
        //Font font = new Font("Helvetica", Font.PLAIN, 16);
        //keyLabel.setFont(font);
        centerPanel.add(keyLabel);
        

     //   keyLabel.setVerticalAlignment(JLabel.TOP);
        myEastPanel.add(centerPanel);

        
    }
    private JMenuBar createMenuBar() {
        myMenuBar = new JMenuBar();
        
        final JMenu file = new JMenu("File");
        final JMenu options = new JMenu("Settings");
        final JMenuItem exit = new JMenuItem("Exit");
        final JMenuItem newGame = new JMenuItem("New Game");
        final JMenuItem controls = new JMenuItem("Controls");
        myWindow = new JMenu("Window");
        final JFrame frame = this;
        
        /*JPanel controlsPanel = new JPanel();
        controlsPanel.add(new JLabel("Rotate"));
        JTextField rotate = new JTextField(2);
        controlsPanel.add(new JLabel("Left"));
        JTextField left = new JTextField(2);
        controlsPanel.add(rotate);
        controlsPanel.add(left);
        controls.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                myBoardGUI.stop();
               JOptionPane.showConfirmDialog(null, controlsPanel, "Please select tetris controls",
                                             JOptionPane.OK_CANCEL_OPTION);
               myBoardGUI.start();
                
            }
            
        });*/
        newGame.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent arg0) {
              //  myMainBoard.newGame();  
            }
            
        });
        exit.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                frame.dispose();
                
            }
            
        });
        
        
        myMenuBar.add(file);
        myMenuBar.add(options);
        myMenuBar.add(myWindow);
     //   panelSize();
        file.add(newGame);
        file.addSeparator();
        file.add(exit);
       
        options.add(controls);
        myMenuBar.setVisible(true);
        
        return myMenuBar;
        
        
    }
    private void panelSize() {
        ButtonGroup group = new ButtonGroup();
        JCheckBox def = new JCheckBox("Default");
        JCheckBox size1 = new JCheckBox("100 x 200");
        JCheckBox size2 = new JCheckBox();
        JCheckBox size3 = new JCheckBox("300 x 300");
        myWindow.add(def);
        //def.setSelected(true);
        myWindow.addSeparator();
        myWindow.add(size1);
        myWindow.add(size2);
        myWindow.add(size3);
        group.add(def);
        group.add(size1);
        group.add(size2);
        group.add(size3);
        def.setSelected(true);
        def.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                myBoardGUI.setPanelSize(10, 20);
                System.out.println(myBoardGUI.getPreferredSize());
//                myBoardGUI.setPreferredSize(myBoardGUI.getPreferredSize());
                
            }
            
        });
        size1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent arg0) {
                myBoardGUI.setPanelSize(5, 10);
                System.out.println(myBoardGUI.getPreferredSize());
//                myBoardGUI.setPreferredSize(myBoardGUI.getPreferredSize());
            }
            
        });
    }
    
    private class keyPress extends KeyAdapter {
      
        @Override
        public void keyPressed(final KeyEvent theEvent) {
            myBoardGUI.keyPressed(theEvent);
            myKey = theEvent.getKeyChar();
            System.out.println(myKey);

        }
        @Override 
        public void keyTyped(final KeyEvent theEvent) {
            
        }
        
        
    }
    
    

}



