package view;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.List;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.Border;

import model.Block;
import model.Board;
import model.MovableTetrisPiece;
import model.Point;
import model.Rotation;
import model.TetrisPiece;

public class BoardGUI extends JPanel implements Observer {
    private static final int ANIMATION_SPEED = 500;
    private static final int BLOCK_WIDTH = 20;
    
    private Board myBoard;
    private MainGUI myFrame;
    private Graphics2D myGraphics;
    private int mySpeed;
    private Timer myTimer;
    private int myX; 
    private int myY;
    private ArrayList<Block[]> myBlockList;
    
    public BoardGUI(Board theBoard, MainGUI theFrame){
        this.myBoard = theBoard;
        this.myFrame = theFrame;
        setLayout(new BorderLayout());
        setBackground(Color.DARK_GRAY);
        final Border blackline = BorderFactory.createLineBorder(Color.black);
        setBorder(blackline);
        myFrame.pack();
        myBoard.newGame();
        myBlockList = new ArrayList<Block[]>();
        myX = -100;
        myY = -100;
        timer();
       
        
    }
    
   public JPanel createNextPiece(){
        final JPanel nextPiece = new JPanel();
        nextPiece.setPreferredSize(new Dimension(100, 100));
        nextPiece.setBackground(Color.LIGHT_GRAY); 
        return nextPiece;

    }
    public JPanel createScorePanel() {
        final JPanel scorePanel = new JPanel();
        scorePanel.setPreferredSize(new Dimension(100, 100));
        final JLabel score = new JLabel("Score: ");
        
        scorePanel.add(score);
        
        scorePanel.setBackground(Color.LIGHT_GRAY);
        return scorePanel;
    }

    @Override
    public void update(final Observable theObservable, final Object theArg) {
        if (theObservable instanceof Board) {
            
            if (theArg instanceof ArrayList) {
               // final ArrayList<Block[]> blockList = (ArrayList<Block[]>) theArg;
                myBlockList = (ArrayList<Block[]>) theArg;
                repaint();
               
            }
            if (theArg instanceof Boolean) {      
                final boolean gameOver = (Boolean) theArg;
                if (gameOver) {
                    myTimer.stop();
                    JOptionPane.showMessageDialog(this, "Game Over.");
                    
                }
                
                
            }
            
        }
        
        
    }
    
    private void timer() {
        
     //   myBoard.step();
        final int speed = 500;
        myTimer = new Timer(speed, new ActionListener() {

            @Override
            public void actionPerformed(final ActionEvent arg0) {
                myBoard.step();
                System.out.println(myBoard.toString());
                
            }
            
        });
        myTimer.start();
        
    }
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        myGraphics = (Graphics2D) theGraphics;
        myGraphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                                    RenderingHints.VALUE_ANTIALIAS_ON);
        myGraphics.setColor(Color.WHITE);


//        System.out.println("x: " + myX);
//        System.out.println("y: " + myY);
        drawSquares();
        
        System.out.println("entering");
        
       
        
    }
    private void drawSquares() {
        System.out.println("list: " + myBlockList.size());
        for (int i = myBlockList.size()-1; i >= 0; i--) {
            
            myY = i * BLOCK_WIDTH;
           Block[] list =   myBlockList.get(i);
            for (int j = 0; j <= list.length - 1; j++) {
               // System.out.println(list[j]);
                
              //  myX = j * 20;
                myX = j * BLOCK_WIDTH;
                // test if the block is null
                if(list[j] != null){
                    myGraphics.fillRect(myX  , myY  , BLOCK_WIDTH, BLOCK_WIDTH);  
                }
                
            }
        }
        System.out.println("x: " + myX);
        System.out.println("y: " + myY);
      //  myGraphics.fillRect(myX  , myY , BLOCK_WIDTH, BLOCK_WIDTH);
    }
    

    
    

}
