package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.List;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.Observable;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

import model.Block;
import model.Board;

public class Score extends JPanel implements Observer{
    
    /**
     * 
     */
    private static final long serialVersionUID = -4885469066941943955L;
    private Integer[] myRowsComplete;
    private LinkedList<Block[]> myFrozenPieces;
    private Font myCustomFont;
    private Color myPanelColor;
    private Border myBorder1;
    private Border myBorder2;
    private Border myCompoundBorder;
    private JPanel myLinesPanel;
    private JPanel myLevelPanel;
    private int myLines;
    private JLabel myLevelLabel;
    private JLabel myLinesLabel;
    private JLabel myScoreLabel;
    private Border myDarkBorder;
    private Border myDarkCompoundBorder;
    private BoardGUI myBoardGUI;
    
    public Score(BoardGUI theBoard) {
       
        super();
        myBoardGUI = theBoard;
        myPanelColor = new Color(196,207,161);
        myBorder1 = BorderFactory.createMatteBorder(3, 3, 3, 3, Color.DARK_GRAY);
        myBorder2 = BorderFactory.createMatteBorder(3, 3, 3, 3, myPanelColor);
        myDarkBorder = BorderFactory.createMatteBorder(3, 3, 3, 3, Color.BLUE);
        myCompoundBorder = BorderFactory.createCompoundBorder(myBorder2, myBorder1);
        myDarkCompoundBorder =  BorderFactory.createCompoundBorder(myDarkBorder, myBorder1);
        setUpComponents();

        
       
    }
    /**
     * Creating the panel for scoring.
     */
    private void setUpComponents() {
        myScoreLabel = new JLabel("Score");
        setPreferredSize(new Dimension(120, 50));
        add(myScoreLabel);
        score();
        
       
        
    }
    public void score() {
        
        myScoreLabel.setForeground(Color.DARK_GRAY);
        myScoreLabel.setFont(createCustomFont()); 
        this.setBackground(myPanelColor);
        this.setBorder(myCompoundBorder);
        
    }
    public JPanel levelPanel() {
        myLevelPanel = new JPanel();
        myLevelLabel = new JLabel("Level");
        myLevelLabel.setForeground(Color.DARK_GRAY);
        myLevelLabel.setFont(createCustomFont());
        myLevelPanel.setBorder(myCompoundBorder);
        myLevelPanel.add(myLevelLabel);
        myLevelPanel.setPreferredSize(new Dimension(120, 50));
        myLevelPanel.setBackground(myPanelColor);


        return myLevelPanel;
        
    }
    public JPanel linesPanel() {
        myLinesPanel = new JPanel();
        myLinesPanel.setBorder(myCompoundBorder);
        myLinesPanel.setPreferredSize(new Dimension(120, 50));
        myLinesPanel.setBackground(myPanelColor);
        myLinesLabel = new JLabel("Lines " + myLines);
        myLinesLabel.setForeground(Color.DARK_GRAY);
        myLinesLabel.setFont(createCustomFont());
        myLinesPanel.add(myLinesLabel);


        return myLinesPanel;
        
        
    }
    public void darkMode() {
        
        myLinesPanel.setBackground(Color.BLACK);
        myLevelPanel.setBackground(Color.BLACK);
        this.setBackground(Color.BLACK);
        myLevelLabel.setForeground(Color.WHITE);
        myLinesLabel.setForeground(Color.WHITE);
        myScoreLabel.setForeground(Color.WHITE);
        
        myLinesPanel.setBorder(myDarkCompoundBorder);
        myLevelPanel.setBorder(myDarkCompoundBorder);
        this.setBorder(myDarkCompoundBorder);
        
       
        
        
    }
    @Override
    public void update(final Observable theObs, final Object theObject) {
        if (theObs instanceof Board) {
            if (theObject instanceof Integer[]) {
                myRowsComplete = (Integer[]) theObject;
                int linesCleared = 0;
                for (int i = 0; i <= myRowsComplete.length; i++) {
                    linesCleared++;  
                  //  System.out.println("ROWS COMPLETE: " + myLines);

                }
                clearedLines(linesCleared - 1);
                
          /*      if (myLines > 1) {
                    myBoardGUI.getTime().setDelay(10);
                    
                }*/




            }
           /* if (theObject instanceof List) {
                myFrozenPieces = (LinkedList<Block[]>) theObject;
                System.out.println("LIST: " + myFrozenPieces);
                
                
            }*/
        }
        
    }
    private void clearedLines(int theLines) {
        int theLevel = 0;
        myLines += theLines;
        myLinesLabel.setText("Lines " + myLines);
        for(int i = myLines; i >= theLevel + 5; i--) {
            theLevel = theLevel + 5;
            System.out.println("Level " + i);
            int delay = myBoardGUI.getTime().getDelay();
            myBoardGUI.getTime().setDelay(delay - 50);
            System.out.println("delay: " + myBoardGUI.getTime().getDelay());
        }
//        if (myLines <= 4) {
//            System.out.println("Level 1");
//            myBoardGUI.getTime().setDelay(200);
//        }

        
    }
    private Font createCustomFont() {
        try {
            //create the font to use. Specify the size!
            myCustomFont = Font.createFont(Font.TRUETYPE_FONT,
                                         new File("Fonts\\ARCADECLASSIC.ttf")).deriveFont(20f);
            final GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            //register the font
            ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, 
                                            new File("Fonts\\ARCADECLASSIC.ttf")));
        } catch (final IOException e) {
            e.printStackTrace();
        } catch (final FontFormatException e) {
            e.printStackTrace();
        }
        return myCustomFont;
        
        
    }
    

}
