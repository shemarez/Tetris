package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Observer;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.border.Border;

import model.Board;
import model.Point;
import model.TetrisPiece;

public class NextPiece extends JPanel implements Observer{

    /**
     * 
     */
    private static final long serialVersionUID = -7943822836795937944L;
    private static final int BLOCK_WIDTH = 20;
    private static final int PANEL_SIZE = 115;

    private TetrisPiece myTetrisPiece;
    private Graphics2D myGraphics;


    public NextPiece() {
        setupComponents();


    }

    private void setupComponents() {
        add(new JLabel("Next Piece"));
        final Border blackline = BorderFactory.createLineBorder(Color.black);
        setBorder(blackline);
        setPreferredSize(new Dimension(PANEL_SIZE, PANEL_SIZE));
        setBackground(Color.LIGHT_GRAY); 
    }

    @Override
    public void update(final java.util.Observable theObs, final Object theObject) {
        if (theObs instanceof Board) {

            if (theObject instanceof TetrisPiece) {
                myTetrisPiece = (TetrisPiece) theObject;
                System.out.println(myTetrisPiece);

                repaint();
            }

        }

    }
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        myGraphics = (Graphics2D) theGraphics;
        final int centerX = 24;
        final int centerY = 2;
        
        if (myTetrisPiece != null) {

            for (final Point p: myTetrisPiece.getPoints()) {
                myGraphics.setPaint(Color.MAGENTA);
                myGraphics.fillRect(p.x() * BLOCK_WIDTH + centerX, 
                                    p.y() * BLOCK_WIDTH + centerY,
                                    BLOCK_WIDTH ,  BLOCK_WIDTH);
                myGraphics.setPaint(Color.BLACK);
                myGraphics.drawRect(p.x() * BLOCK_WIDTH + centerX, 
                                    p.y() * BLOCK_WIDTH + centerY,
                                    BLOCK_WIDTH ,  BLOCK_WIDTH);

            }

        } 



    }



}
